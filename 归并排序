#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>

void merge(int *arr, int len, int gap)
{
	int *buff = (int *)malloc(sizeof(int) * len);
	assert(buff != NULL);

	int L1 = 0;
	int H1 = L1 + gap - 1;
	int L2 = H1 + 1;
	int H2 = L2 + gap - 1 < len ? L2 + gap - 1 : len - 1;

	int i = 0;
	while(L2 < len)
	{
		while(L1 <= H1 && L2 <= H2)
		{
			if(arr[L1] <= arr[L2])
			{
				buff[i++] = arr[L1++];
			}
			else
			{
				buff[i++] = arr[L2++];
			}
		}

		while(L1 <= H1)
		{
			buff[i++] = arr[L1++];
		}
		while(L2 <= H2)
		{
			buff[i++] = arr[L2++];
		}

		L1 = H2 + 1;
		H1 = L1 + gap - 1;
		L2 = H1 + 1;
		H2 = L2 + gap - 1 < len ? L2 + gap - 1 : len - 1;
	}

	while(L1 < len)
	{
		buff[i++] = arr[L1++];
	}

	memcpy(arr, buff, sizeof(int) * len);

	free(buff);
}

void MergeSort(int *arr, int len)
{
	for(int i = 1; i < len; i *= 2)
	{
		merge(arr, len, i);
	}
}

void show(int *arr, int len)
{
	for(int i = 0; i < len; i++)
	{
		printf("%d  ", arr[i]);
	}
	printf("\n");
}

//int main()
//{
//	int arr[] = {3,54,675,23,65,4,76,98,43,354,768,87,21};
//	int len = sizeof(arr) / sizeof(arr[0]);
//	
//	MergeSort(arr, len);
//	show(arr, len);
//
//	return 0;
//}
